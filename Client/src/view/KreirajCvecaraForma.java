/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.Controller;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import domain.Cvecar;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import tableModel.TableModelCvecar;
import validator.PasswordHash;
import validator.Validator;

/**
 *
 * @author Saki
 */
public class KreirajCvecaraForma extends javax.swing.JFrame {

    private Cvecar cvecarChange;
    private Cvecar cvecarCreate;
    private UpravljajCvecarimaForma pcf;
    private boolean validation;
    private ArrayList<Cvecar> novaLista;
    private ArrayList<Cvecar> listaCvecara;

    public boolean isValidation() {
        return validation;
    }

    public void setValidation(boolean validation) {
        this.validation = validation;
    }

    /**
     * Creates new form KreirajCvecaraForma
     */
    public KreirajCvecaraForma() {
        initComponents();
        setResizable(false);
        setTitle("Kreiraj cvećara");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        txtId.setVisible(false);
        jLabel5.setVisible(false);
        btnNewPassword.setVisible(false);
        cvecarCreate = new Cvecar(-1, "", "", "", "");
        try {
            Controller.getInstance().kreirajCvecar(cvecarCreate);
            String hashed = PasswordHash.hashPassword(cvecarCreate.getLozinka());
            cvecarCreate.setLozinka(hashed);
            ArrayList<Cvecar> lista = Controller.getInstance().ucitajCvecareIzBaze();
            for (Cvecar c : lista) {
                if (c.equals(cvecarCreate)) {
                    cvecarCreate.setId(c.getId());
                }
            }
            JOptionPane.showMessageDialog(this, "Sistem je kreirao cvećara.", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(KreirajCvecaraForma.class.getName()).log(Level.SEVERE, null, ex);
        }
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                int choice = JOptionPane.showConfirmDialog(
                        KreirajCvecaraForma.this,
                        "Da li želite da prekinete kreiranje cvećara?",
                        "Potvrda zatvaranja",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE
                );

                if (choice == JOptionPane.YES_OPTION) {
                    if (cvecarCreate != null && cvecarChange == null) {
                        try {
                            Controller.getInstance().obrisiCvecara(cvecarCreate);
                        } catch (Exception ex) {
                            Logger.getLogger(KreirajCvecaraForma.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    dispose();
                }
            }
        });
    }

    public KreirajCvecaraForma(JFrame parent, Cvecar c) {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        txtId.setVisible(true);
        jLabel5.setVisible(true);
        setTitle("Promeni cvećara");
        txtId.setEnabled(false);
        jLabel4.setVisible(false);
        txtLozinka.setVisible(false);
        btnNewPassword.setVisible(true);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        if (c != null) {
            cvecarChange = c;
            pcf = (UpravljajCvecarimaForma) parent;
            popuniIzmenuCvecar(cvecarChange);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtIme = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPrezime = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtKorisnickoIme = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtLozinka = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        btnNewPassword = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Ime");

        txtIme.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Prezime");

        txtPrezime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Korisničko ime");

        txtKorisnickoIme.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Lozinka");

        txtLozinka.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnCancel.setBackground(new java.awt.Color(153, 255, 204));
        btnCancel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCancel.setText("Otkaži");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(153, 255, 204));
        btnSave.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSave.setText("Sačuvaj");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("ID");

        txtId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });

        btnNewPassword.setBackground(new java.awt.Color(153, 255, 204));
        btnNewPassword.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnNewPassword.setText("Promeni lozinku");
        btnNewPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSave)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(26, 26, 26)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(txtIme, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                                                .addComponent(txtPrezime)
                                                .addComponent(txtId, javax.swing.GroupLayout.Alignment.TRAILING)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                            .addComponent(txtLozinka, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtKorisnickoIme))
                                .addComponent(btnNewPassword, javax.swing.GroupLayout.Alignment.TRAILING))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancel)
                        .addGap(161, 161, 161)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtKorisnickoIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtLozinka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(btnNewPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        if (cvecarCreate != null && cvecarChange == null) {
            try {
                Controller.getInstance().obrisiCvecara(cvecarCreate);
                this.dispose();
            } catch (Exception ex) {
                Logger.getLogger(KreirajCvecaraForma.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            this.dispose();
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:

        if (txtIme.getText().isEmpty() || txtPrezime.getText().isEmpty() || txtKorisnickoIme.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Morate popuniti sva polja!", "Greška", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (cvecarChange == null && txtKorisnickoIme.getText().equals("admin")) {
           // JOptionPane.showMessageDialog(this, "Izabrano korisničko ime je nedostupno!", "Greška", JOptionPane.ERROR_MESSAGE);
          //  return;
        }
        if (!Validator.isValidName(txtIme.getText()) || !Validator.isValidName(txtPrezime.getText())) {
            JOptionPane.showMessageDialog(this, "Ime i prezime moraju imati samo slova!", "Greška", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String ime = txtIme.getText();
        String prezime = txtPrezime.getText();
        String korisnickoIme = txtKorisnickoIme.getText();
        if (cvecarChange == null && cvecarCreate != null) {
            if (txtLozinka.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Morate popuniti sva polja!", "Greška", JOptionPane.ERROR_MESSAGE);
                return;
            } else if ((txtLozinka.getText()).length() < 8) {
                JOptionPane.showMessageDialog(this, "Lozinka mora da ima minimum 8 karaktera!", "Greška", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String lozinka = txtLozinka.getText();
            cvecarCreate.setIme(ime);
            cvecarCreate.setPrezime(prezime);
            cvecarCreate.setKorisnickoIme(korisnickoIme);
            String hashed = PasswordHash.hashPassword(lozinka);
            cvecarCreate.setLozinka(hashed);
            try {
                try {
                    listaCvecara = Controller.getInstance().ucitajCvecareIzBaze();
                } catch (Exception ex) {
                    Logger.getLogger(KreirajCvecaraForma.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (Cvecar c : listaCvecara) {
                    if (c.equals(cvecarCreate)) {
                        JOptionPane.showMessageDialog(this, "Cvećar već postoji u bazi.", "Greška", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                Controller.getInstance().promeniCvecara(cvecarCreate);
                JOptionPane.showMessageDialog(this, "Sistem je zapamtio cvećara.", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Sistem nije uspeo da zapamti cvećara.", "Greška", JOptionPane.ERROR_MESSAGE);
                return;
            }
            this.dispose();
        } else {
            try {
                novaLista = Controller.getInstance().ucitajCvecareIzBaze();
            } catch (Exception ex) {
                Logger.getLogger(KreirajCvecaraForma.class.getName()).log(Level.SEVERE, null, ex);
            }
            cvecarChange = vratiAzuriranogCvecara();//za slucaj da user promeni sifru opet moramo u bazu da bi azurirali user-a
            //a zatim da ga tako azuriranog prosledimo validaciji da bi se proverila nova sifra a ne stara
            if (cvecarChange != null) {
                cvecarChange.setIme(ime);
                cvecarChange.setKorisnickoIme(korisnickoIme);
                cvecarChange.setPrezime(prezime);
                try {
                    listaCvecara = Controller.getInstance().ucitajCvecareIzBaze();
                } catch (Exception ex) {
                    Logger.getLogger(KreirajCvecaraForma.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (Cvecar c : listaCvecara) {
                    if (c.equals(cvecarChange)) {
                        if (cvecarChange.getId() == c.getId()) {
                            break;
                        } else {
                            JOptionPane.showMessageDialog(this, "Cvećar već postoji u bazi.", "Greška", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                }
                ValidationForm vf = new ValidationForm(this, cvecarChange);
                vf.setVisible(true);
                System.out.println("validacija:" + validation);
                if (validation == true) {
                    try {
                        Controller.getInstance().promeniCvecara(cvecarChange);
                        JOptionPane.showMessageDialog(this, "Sistem je zapamtio cvećara.", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
                        pcf.getTblCvecari().setModel(new TableModelCvecar());
                        this.dispose();
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Sistem nije uspeo da zapamti cvećara.", "Greška", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                }
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnNewPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewPasswordActionPerformed
        // TODO add your handling code here:

        PromeniLozinkuForma forma = new PromeniLozinkuForma(pcf, true, cvecarChange);
        forma.setVisible(true);
    }//GEN-LAST:event_btnNewPasswordActionPerformed

    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnNewPassword;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtIme;
    private javax.swing.JTextField txtKorisnickoIme;
    private javax.swing.JTextField txtLozinka;
    private javax.swing.JTextField txtPrezime;
    // End of variables declaration//GEN-END:variables

    private void popuniIzmenuCvecar(Cvecar cvecar) {
        txtId.setText(cvecar.getId() + "");
        txtIme.setText(cvecar.getIme());
        txtPrezime.setText(cvecar.getPrezime());
        txtKorisnickoIme.setText(cvecar.getKorisnickoIme());
        txtLozinka.setText("");
    }

    private Cvecar vratiAzuriranogCvecara() {

        for (Cvecar c : novaLista) {
            if (c.getKorisnickoIme().equals(cvecarChange.getKorisnickoIme())){
                cvecarChange.setLozinka(c.getLozinka());
                return cvecarChange;
            }
        }
        return null;

    }

}
